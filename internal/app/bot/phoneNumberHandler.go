package bot

import (
	"github.com/drTragger/yakudza-cars-bot/internal/app"
	"github.com/drTragger/yakudza-cars-bot/internal/app/models"
	"github.com/drTragger/yakudza-cars-bot/internal/app/utils"
	"github.com/yanzay/tbot/v2"
	"strings"
	"time"
)

func (b *Bot) requestPhoneNumber(m *tbot.Message) {
	carOption := b.getSelectedCar(m.Chat.ID)
	var message string

	if carOption == nil {
		message = "–ú–∏ –∑–Ω–∞—î–º–æ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —â–µ –±—ñ–ª—å—à–µ –∫—Ä—É—Ç–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ! üöó\n–ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä, —â–æ–± –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ø–æ–º—ñ–≥ –≤–∞–º —ñ–∑ –ø—ñ–¥–±–æ—Ä–æ–º —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—î—é, —ñ –≤–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–≤—Ç–æ –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ. üòä"
	} else {
		message = "–°—Ö–æ–∂–µ, –≤–∏ –∑–Ω–∞–π—à–ª–∏ —Å–≤–æ—î —ñ–¥–µ–∞–ª—å–Ω–µ –∞–≤—Ç–æ! üôå\n–ó–∞–ª–∏—à—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä, —ñ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó üöò"
	}

	b.sendMessage(m, message, utils.GetContactKeyboard())

	b.setUserState(m.Chat.ID, app.AwaitingPhone)
}

func (b *Bot) handlePhoneNumber(m *tbot.Message) {
	// Ensure `m.Contact` is not nil
	if m.Contact == nil {
		b.logger.Error("No contact information provided")
		b.sendMessage(m, "–ù–µ –±—É–ª–æ –Ω–∞–¥–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.", nil)
		return
	}

	carData := b.getCarData(m.Chat.ID)

	if carData == nil {
		b.sendMessage(m, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –ø—Ä–æ–π–¥—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:", utils.GetPriceKeyboard())
		b.setUserState(m.Chat.ID, app.AwaitingCarPrice)
		return
	}

	// Get the phone number from the message
	phoneNumber := strings.TrimLeft(m.Contact.PhoneNumber, "+")

	// Use channels to manage asynchronous error handling
	errChan := make(chan error, 2)

	// Asynchronously fetch location and create a user
	go func() {
		location, err := time.LoadLocation("Europe/Kyiv")
		if err != nil {
			b.logger.Info("Failed to load location: ", err.Error())
			errChan <- err
			return
		}

		// Create the user in the database
		err = b.storage.User().Create(&models.User{
			ChatId:    m.Chat.ID,
			Phone:     phoneNumber,
			CreatedAt: time.Now().In(location).Format(app.TimeLayout),
		})

		errChan <- err
	}()

	// Handle state for showing feedback
	if b.getUserState(m.Chat.ID) == "show_feedback" {
		b.showFeedback(m)
		return
	}

	// Asynchronously update `carData` with the phone number
	go func() {
		carData.Phone = phoneNumber
		b.setCarData(m.Chat.ID, carData)

		// Send confirmation to the user
		b.sendMessage(m, "–î—è–∫—É—é! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "+phoneNumber+".", utils.GetMenuKeyboard())

		errChan <- nil
	}()

	// Send details to the group asynchronously
	if carData.Price.Title != "" && carData.Year != "" {
		go b.sendCarDetailsToGroup(phoneNumber, carData.Price.Title, carData.Year)
	} else {
		go b.sendCarDetailsToGroup(phoneNumber, "–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ")
	}

	// Process potential errors from goroutines
	for i := 0; i < 2; i++ {
		if err := <-errChan; err != nil {
			b.logger.Error("Error occurred: ", err.Error())
		}
	}

	// Close the error channel after all operations
	close(errChan)

	carOption := b.getSelectedCar(m.Chat.ID)
	if carOption == nil {
		// Display car options after operations complete
		b.showCarOption(m)
	} else {
		b.handleSelectCar(carOption)
		b.deleteSelectedCar(m.Chat.ID)
	}

	b.deleteUserState(m.Chat.ID)
}

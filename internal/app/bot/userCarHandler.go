package bot

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/drTragger/yakudza-cars-bot/internal/app"
	"github.com/drTragger/yakudza-cars-bot/internal/app/models"
	"github.com/drTragger/yakudza-cars-bot/internal/app/utils"
	"github.com/yanzay/tbot/v2"
	"strconv"
)

func (b *Bot) handleCarSelection(m *tbot.Message) {
	// Send a message with the reply keyboard for price selection
	b.sendMessage(m, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ü—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω:", utils.GetPriceKeyboard())
}

func (b *Bot) handlePriceSelection(m *tbot.Message, selectedPrice *models.PriceRange) {
	b.setCarData(m.Chat.ID, &models.CarDetails{Price: selectedPrice})

	b.askForCarYear(m)
}

func (b *Bot) askForCarYear(m *tbot.Message) {
	years := generateYears(app.CarOptionsStartYear)

	yearKeyboard := &tbot.ReplyKeyboardMarkup{
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	for i := 0; i < len(years); i += 3 {
		var row []tbot.KeyboardButton

		for j := i; j < i+3 && j < len(years); j++ {
			row = append(row, tbot.KeyboardButton{
				Text: years[j],
			})
		}

		yearKeyboard.Keyboard = append(yearKeyboard.Keyboard, row)
	}

	b.sendMessage(m, "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ –∞–≤—Ç–æ:", yearKeyboard)
}

func (b *Bot) handleYearSelection(m *tbot.Message, selectedYear string) {
	carData := b.getCarData(m.Chat.ID)
	carData.Year = selectedYear

	// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
	b.sendMessage(m, fmt.Sprintf(
		"–î—è–∫—É—é! –í–∏ –æ–±—Ä–∞–ª–∏ –∞–≤—Ç–æ –∑ —Ü—ñ–Ω–æ—é %s —ñ —Ä–æ–∫–æ–º –≤–∏–ø—É—Å–∫—É %s",
		carData.Price.Title, carData.Year),
		utils.GetMenuKeyboard(),
	)

	chatId, err := strconv.Atoi(m.Chat.ID)
	if err != nil {
		b.logger.Error("Failed to convert chatId to int: ", err.Error())
		b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	user, err := b.storage.User().FindByChatId(chatId)
	if errors.Is(err, sql.ErrNoRows) {
		// –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
		b.requestPhoneNumber(m)
		return
	} else if err != nil {
		b.logger.Error("Failed to find user by chat id: ", err.Error())
		b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	b.sendCarDetailsToGroup(user.Phone, carData.Price.Title, carData.Year)
	b.showCarOption(m)
}

func (b *Bot) sendCarDetailsToGroup(phoneNumber string, price string, year string) {
	// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏
	groupMessage := fmt.Sprintf(
		"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á +%s\n–û–±—Ä–∞–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:\n–¶—ñ–Ω–∞: %s\n–†—ñ–∫: %s",
		phoneNumber, price, year,
	)

	_, err := b.client.SendMessage(b.config.Admin.GroupID, groupMessage)
	if err != nil {
		b.logger.Error("Failed to send message to the group: ", err.Error())
	}
}

func (b *Bot) showCarOption(m *tbot.Message) {
	selectedCar := b.getCarData(m.Chat.ID)
	if selectedCar == nil || *selectedCar == (models.CarDetails{}) {
		b.sendMessage(m, "–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–π–¥—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:", utils.GetPriceKeyboard())
		return
	}

	shownOptions := b.getShownOptionIDs(m.Chat.ID)

	carOption, err := b.storage.CarOption().GetByDetails(selectedCar, shownOptions)
	if errors.Is(err, sql.ErrNoRows) {
		b.logger.Info("–ù–µ–º–∞—î –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ.")
		b.sendMessage(m, "–©–µ –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –í–∞–º –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä, –≤—ñ–Ω —Å–∫–æ—Ä–æ –∑ –í–∞–º–∏ –∑–≤ º—è–∂–µ—Ç—å—Å—è üîú", nil)
		b.deleteCarData(m.Chat.ID)
		return
	} else if err != nil {
		b.logger.Error("Failed to get car option: ", err.Error())
		b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", utils.GetPriceKeyboard())
		return
	}

	shownOptions = append(shownOptions, carOption.ID)
	b.setShownOptionIDs(m.Chat.ID, shownOptions)

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∞–≤—Ç–æ
	message := fmt.Sprintf(
		"üöó %s\n\n%s\n\nüíµ –¶—ñ–Ω–∞: %d$\nüìÖ –†—ñ–∫: %s",
		carOption.Title, carOption.Description, carOption.Price, carOption.Year,
	)

	// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–•–æ—á—É —Ü–µ –∞–≤—Ç–æ"
	inlineKeyboard := &tbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]tbot.InlineKeyboardButton{
			{
				{Text: "–•–æ—á—É —Ü–µ –∞–≤—Ç–æ", CallbackData: fmt.Sprintf("select_car_%d", carOption.ID)},
			},
		},
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ
	otherCarOption, err := b.storage.CarOption().GetByDetails(selectedCar, shownOptions)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			// –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ
			b.logger.Info("–ù–µ–º–∞—î —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ.")
		} else {
			// –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
			b.logger.Error("Failed to check for other cars: ", err.Error())
			b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
			return
		}
	}

	// –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–•–æ—á—É —â–µ", —è–∫—â–æ —î —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–≤—Ç–æ
	if otherCarOption != nil {
		inlineKeyboard.InlineKeyboard[0] = append(inlineKeyboard.InlineKeyboard[0], tbot.InlineKeyboardButton{
			Text:         "–•–æ—á—É —â–µ",
			CallbackData: "more_cars",
		})
	}

	// –Ø–∫—â–æ —î —Ñ–æ—Ç–æ –∞–≤—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
	_, err = b.client.SendPhoto(
		m.Chat.ID,
		carOption.PhotoID,
		tbot.OptCaption(message), // –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		tbot.OptInlineKeyboardMarkup(inlineKeyboard), // –î–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
	)
	if err != nil {
		b.logger.Error("Failed to send photo to the group: ", err.Error())
	}

	if otherCarOption == nil {
		contactKeyboard := &tbot.InlineKeyboardMarkup{
			InlineKeyboard: [][]tbot.InlineKeyboardButton{
				{
					{Text: "–ó–≤ º—è–∑–∞—Ç–∏—Å—è", CallbackData: "contact_us"},
				},
			},
		}

		b.sendMessage(m, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –Ω–∞–¥–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–≤ º—è–∑–∞—Ç–∏—Å—è.", contactKeyboard)
	}
}

func (b *Bot) handleSelectCar(cq *tbot.CallbackQuery) {
	id := cq.Data[11:]
	carOptionId, err := strconv.Atoi(id)
	if err != nil {
		b.logger.Error("Failed to convert carOptionId to int: ", err.Error())
		b.sendMessage(cq.Message, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	// –ö–∞–Ω–∞–ª–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
	carOptionChan := make(chan *models.CarOption)
	userChan := make(chan *models.User)
	errChan := make(chan error, 2)

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
	go func() {
		carOption, err := b.storage.CarOption().GetByID(carOptionId)
		if err != nil {
			errChan <- err
			return
		}
		carOptionChan <- carOption
	}()

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	go func() {
		chatId, err := strconv.Atoi(cq.Message.Chat.ID)
		if err != nil {
			errChan <- err
			return
		}

		user, err := b.storage.User().FindByChatId(chatId)
		if err != nil {
			errChan <- err
			return
		}
		userChan <- user
	}()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –≥–æ—Ä—É—Ç–∏–Ω
	var carOption *models.CarOption
	var user *models.User

	for i := 0; i < 2; i++ {
		select {
		case carOption = <-carOptionChan:
		case user = <-userChan:
		case err = <-errChan:
			b.logger.Error("Error occurred: ", err.Error())
			b.sendMessage(cq.Message, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
			return
		}
	}

	// –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, —è–∫–µ –≤–∏–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
	go func() {
		err = b.client.DeleteMessage(cq.Message.Chat.ID, cq.Message.MessageID)
		if err != nil {
			b.logger.Error("Failed to delete message: ", err.Error())
		}
	}()

	// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏
	groupMessage := fmt.Sprintf(
		"+%s:\n%d. %s",
		user.Phone, carOption.ID, carOption.Title,
	)

	// –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø—É
	go func() {
		_, err = b.client.SendPhoto(b.config.Admin.GroupID, carOption.PhotoID, tbot.OptCaption(groupMessage))
		if err != nil {
			b.logger.Error("Failed to send message to the group: ", err.Error())
			b.sendMessage(cq.Message, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
			return
		}
	}()

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
	thankYouMessage := "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤–∏–±—ñ—Ä! –ú–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
	b.sendMessage(cq.Message, thankYouMessage, nil)
}

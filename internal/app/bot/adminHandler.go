package bot

import (
	"fmt"
	"github.com/drTragger/yakudza-cars-bot/internal/app/models"
	"github.com/yanzay/tbot/v2"
	"strconv"
	"time"
)

const (
	AwaitingTitle               = "awaiting_admin_car_title"
	AwaitingDescription         = "awaiting_admin_car_description"
	AwaitingPrice               = "awaiting_admin_price_selection"
	AwaitingYear                = "awaiting_admin_year_selection"
	AwaitingPhoto               = "awaiting_admin_photo"
	AwaitingFeedbackDescription = "awaiting_admin_feedback_description"
	AwaitingFeedbackVideo       = "awaiting_admin_feedback_video"
)

func (b *Bot) isAdmin(m *tbot.Message) bool {
	for _, id := range b.config.Admin.AdminIDs {
		if id == m.Chat.ID {
			return true
		}
	}
	return false
}

func (b *Bot) ensureAdmin(m *tbot.Message) bool {
	if !b.isAdmin(m) {
		b.sendMessage(m, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.", nil)
		return false
	}
	return true
}

func (b *Bot) HandleAdmin(m *tbot.Message) {
	if m.Chat.ID == b.config.GroupID {
		return
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		return
	}

	// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
	b.sendMessage(m, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", b.generateAdminOptionsKeyboard())
}

func (b *Bot) handleAddOptions(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.isAdmin(cq.Message) {
		b.sendMessage(cq.Message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.", nil)
		return
	}

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ü—ñ–Ω–∏
	b.editCallbackMessage(cq, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", nil)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	userStates[cq.Message.Chat.ID] = AwaitingTitle
}

func (b *Bot) handleAdminTitleSelection(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		return
	}

	if len(m.Text) > 255 {
		b.sendMessage(m, "–ù–∞–∑–≤–∞ –Ω–µ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 255 —Å–∏–º–≤–æ–ª—ñ–≤.", nil)
		return
	}

	carOption.Title = m.Text

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º —Ü—ñ–Ω–∏
	b.sendMessage(m, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", nil)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	userStates[m.Chat.ID] = AwaitingDescription
}

func (b *Bot) handleAdminDescriptionSelection(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		return
	}

	if len(m.Text) > 500 {
		b.sendMessage(m, "–û–ø–∏—Å –Ω–µ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 —Å–∏–º–≤–æ–ª—ñ–≤.", nil)
		return
	}

	carOption.Description = m.Text

	// –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ —Ü—ñ–Ω—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –≤—Ä—É—á–Ω—É
	b.sendMessage(m, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (—É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ).", nil)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	userStates[m.Chat.ID] = AwaitingPrice
}

func (b *Bot) handleAdminPriceInput(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		return
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—é —Ü—ñ–Ω–æ—é
	price, err := strconv.Atoi(m.Text)
	if err != nil || price <= 0 {
		b.sendMessage(m, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏).", nil)
		return
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É
	carOption.Price = price

	// –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó generateYears
	years := generateYears(StartYear)

	// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–∫—É –∑ —á–æ—Ç–∏—Ä–º–∞ –∫–æ–ª–æ–Ω–∫–∞–º–∏
	yearKeyboard := &tbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]tbot.InlineKeyboardButton{},
	}

	// –î–æ–¥–∞—î–º–æ –ø–æ —á–æ—Ç–∏—Ä–∏ —Ä–æ–∫–∏ –≤ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
	for i := 0; i < len(years); i += 4 {
		var row []tbot.InlineKeyboardButton

		// –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à—ñ 4 —Ä–æ–∫–∏ –≤ —Ä—è–¥–æ–∫
		for j := i; j < i+4 && j < len(years); j++ {
			row = append(row, tbot.InlineKeyboardButton{
				Text:         years[j],
				CallbackData: fmt.Sprintf("year_%s", years[j]),
			})
		}

		// –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
		yearKeyboard.InlineKeyboard = append(yearKeyboard.InlineKeyboard, row)
	}

	// –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–±—Ä–∞—Ç–∏ —Ä—ñ–∫
	b.sendMessage(m, "–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ –¥–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", yearKeyboard)

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	userStates[m.Chat.ID] = AwaitingYear
}

func (b *Bot) handleAdminYearSelection(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(cq.Message) {
		return
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä—ñ–∫
	selectedYear := cq.Data[5:] // year_2018, year_2019, etc.
	b.logger.Infof("–†—ñ–∫ –æ–±—Ä–∞–Ω–∏–π: %s", selectedYear)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä—ñ–∫
	carOption.Year = selectedYear

	// –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
	b.editCallbackMessage(cq, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.", nil)

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	userStates[cq.Message.Chat.ID] = AwaitingPhoto
}

func (b *Bot) handleAdminPhoto(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		return
	}

	location, err := time.LoadLocation("Europe/Kyiv")
	if err != nil {
		b.logger.Info("Failed to load location: ", err.Error())
	}

	carOption.PhotoID = m.Photo[0].FileID // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ FileID —Ñ–æ—Ç–æ
	carOption.CreatedAt = time.Now().In(location).Format(TimeLayout)
	err = b.storage.CarOption().Create(carOption)
	if err != nil {
		b.logger.Error("Failed to create new car option: ", err.Error())
		b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}
	b.logger.Infof("–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: %s", m.Photo[0].FileID)

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
	b.sendMessage(m, "–¶–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", b.generateAdminOptionsKeyboard())

	// –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	delete(userStates, m.Chat.ID)
}

func (b *Bot) handleViewOptions(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(cq.Message) {
		return
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	options, err := b.storage.CarOption().GetAll()
	if err != nil {
		b.logger.Error("Failed to get car options: ", err.Error())
		b.sendCallbackMessage(cq, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∞–≤—Ç–æ
	if len(options) == 0 {
		b.sendCallbackMessage(cq, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∞–≤—Ç–æ.", nil)
		return
	}

	// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–º–∏–ª–æ–∫
	errChan := make(chan error, len(options))

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω –≤–∞—Ä—ñ–∞–Ω—Ç –∞–≤—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	for _, option := range options {
		go func(option *models.CarOption) {
			// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—ñ–Ω–æ—é —ñ —Ä–æ–∫–æ–º
			message := fmt.Sprintf(
				"%d. %s\n\nüìù–û–ø–∏—Å: %s\n\nüíµ–¶—ñ–Ω–∞: %d\nüìÖ–†—ñ–∫: %s",
				option.ID, option.Title, option.Description, option.Price, option.Year,
			)

			// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–í–∏–¥–∞–ª–∏—Ç–∏"
			deleteKeyboard := &tbot.InlineKeyboardMarkup{
				InlineKeyboard: [][]tbot.InlineKeyboardButton{
					{
						{Text: "–í–∏–¥–∞–ª–∏—Ç–∏ ‚ùå", CallbackData: fmt.Sprintf("delete_option_%d", option.ID)},
					},
				},
			}

			// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, —è–∫—â–æ –≤–æ–Ω–æ —î
			if option.PhotoID != "" {
				_, err := b.client.SendPhoto(
					cq.Message.Chat.ID,
					option.PhotoID,
					tbot.OptCaption(message),
					tbot.OptInlineKeyboardMarkup(deleteKeyboard),
				)
				errChan <- err
			} else {
				// –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				_, err := b.client.SendMessage(cq.Message.Chat.ID, message, tbot.OptInlineKeyboardMarkup(deleteKeyboard))
				errChan <- err
			}
		}(option)
	}

	// –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	for i := 0; i < len(options); i++ {
		if err := <-errChan; err != nil {
			b.logger.Error("Failed to send car option: ", err.Error())
		}
	}

	// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
	close(errChan)
}

func (b *Bot) handleDeleteOption(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(cq.Message) {
		return
	}

	id := cq.Data[14:]
	carOptionId, err := strconv.Atoi(id)
	if err != nil {
		b.logger.Error("Failed to convert carOptionId to int: ", err.Error())
		b.sendCallbackMessage(cq, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	// –ö–∞–Ω–∞–ª–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ–π
	errChan := make(chan error, 2)

	// –í–∏–¥–∞–ª—è—î–º–æ –æ–ø—Ü—ñ—é –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	go func() {
		_, err := b.storage.CarOption().Delete(carOptionId)
		errChan <- err
	}()

	// –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	go func() {
		errChan <- b.client.DeleteMessage(cq.Message.Chat.ID, cq.Message.MessageID)
	}()

	// –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±–æ—Ö goroutines
	for i := 0; i < 2; i++ {
		if err := <-errChan; err != nil {
			b.logger.Error("Failed to complete operation: ", err.Error())
			b.sendCallbackMessage(cq, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
			return
		}
	}

	// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
	close(errChan)
}

func (b *Bot) handleAdminAddFeedback(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(cq.Message) {
		b.sendCallbackMessage(cq, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.", nil)
		return
	}

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∑ –∑–∞–ø–∏—Ç–æ–º –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –∑ –≤—ñ–¥–µ–æ
	b.editCallbackMessage(cq, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤—ñ–¥–≥—É–∫—É.", nil)

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
	userStates[cq.Message.Chat.ID] = AwaitingFeedbackDescription
}

func (b *Bot) handleFeedbackDescriptionInput(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(m) {
		b.sendMessage(m, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.", nil)
		return
	}

	if len(m.Text) > 100 {
		b.sendMessage(m, "–û–ø–∏—Å –Ω–µ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤.", nil)
	}

	feedbackToAdd.Description = m.Text

	b.sendMessage(m, "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –≤—ñ–¥–≥—É–∫—É.", nil)

	userStates[m.Chat.ID] = AwaitingFeedbackVideo
}

func (b *Bot) handleFeedbackVideoInput(m *tbot.Message) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
	if userStates[m.Chat.ID] != AwaitingFeedbackVideo {
		return
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–µ–æ
	if m.Video == nil || m.Video.FileID == "" {
		b.sendMessage(m, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –≤—ñ–¥–≥—É–∫—É.", nil)
		return
	}

	feedbackToAdd.VideoFileID = m.Video.FileID

	location, err := time.LoadLocation("Europe/Kyiv")
	if err != nil {
		b.logger.Info("Failed to load location: ", err.Error())
	}

	feedbackToAdd.CreatedAt = time.Now().In(location).Format(TimeLayout)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–µ–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ –≥—Ä—É–ø–∏ —Ä–∞–∑–æ–º —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º –≤—ñ–¥–≥—É–∫—É
	err = b.storage.Feedback().Create(feedbackToAdd)

	if err != nil {
		b.logger.Error("Failed to save feedback: ", err.Error())
		b.sendMessage(m, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
	b.sendMessage(m, "–î—è–∫—É—î–º–æ! –í–∞—à –≤—ñ–¥–≥—É–∫ –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π.", nil)

	// –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	delete(userStates, m.Chat.ID)
}

func (b *Bot) handleAdminViewFeedback(cq *tbot.CallbackQuery) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.ensureAdmin(cq.Message) {
		return
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	feedbackList, err := b.storage.Feedback().GetAll()
	if err != nil {
		b.logger.Error("Failed to get all feedback: ", err.Error())
		b.sendCallbackMessage(cq, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", nil)
		return
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—ñ–¥–≥—É–∫–∏
	if len(feedbackList) == 0 {
		b.sendCallbackMessage(cq, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤.", nil)
		return
	}

	// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–º–∏–ª–æ–∫
	errChan := make(chan error, len(feedbackList))

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω –≤—ñ–¥–≥—É–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	for _, feedback := range feedbackList {
		go func(fb *models.Feedback) {
			// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–í–∏–¥–∞–ª–∏—Ç–∏"
			deleteKeyboard := &tbot.InlineKeyboardMarkup{
				InlineKeyboard: [][]tbot.InlineKeyboardButton{
					{
						{Text: "–í–∏–¥–∞–ª–∏—Ç–∏ ‚ùå", CallbackData: fmt.Sprintf("delete_feedback_%d", fb.ID)},
					},
				},
			}

			createdAt, err := time.Parse(TimeLayout, fb.CreatedAt) // Replace 'TimeLayout' with your actual time layout
			if err != nil {
				b.logger.Error("Failed to parse date: ", err.Error())
				return
			}

			// Format the time in a more user-friendly way
			formattedDate := createdAt.Format("02.01.2006 –æ 15:04")

			// –Ø–∫—â–æ —î –≤—ñ–¥–µ–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
			_, err = b.client.SendVideo(
				cq.Message.Chat.ID,
				fb.VideoFileID,
				tbot.OptCaption(fmt.Sprintf("%s\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ %s", feedback.Description, formattedDate)),
				tbot.OptInlineKeyboardMarkup(deleteKeyboard),
			)
			errChan <- err
		}(feedback)
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	for i := 0; i < len(feedbackList); i++ {
		if err := <-errChan; err != nil {
			b.logger.Error("Failed to send feedback: ", err.Error())
		}
	}

	// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–Ω–∞–ª
	close(errChan)
}

func (b *Bot) handleAdminDeleteFeedback(cq *tbot.CallbackQuery) {
	// Check if the user is an admin
	if !b.ensureAdmin(cq.Message) {
		return
	}

	// Extract the feedback ID from the callback data
	feedbackIDStr := cq.Data[16:] // Assuming "delete_feedback_<id>"
	feedbackID, err := strconv.Atoi(feedbackIDStr)
	if err != nil {
		b.logger.Error("Failed to convert feedback ID to int: ", err.Error())
		return
	}

	// Create error channel for handling operations
	errChan := make(chan error, 2)

	// Run feedback deletion and message deletion in parallel
	go func() {
		err := b.storage.Feedback().Delete(feedbackID)
		errChan <- err
	}()

	go func() {
		err := b.client.DeleteMessage(cq.Message.Chat.ID, cq.Message.MessageID)
		errChan <- err
	}()

	// Collect results from both operations
	for i := 0; i < 2; i++ {
		if err := <-errChan; err != nil {
			b.logger.Error("Failed to complete operation: ", err.Error())
			return
		}
	}

	// Close the error channel
	close(errChan)
}

func (b *Bot) generateAdminOptionsKeyboard() *tbot.InlineKeyboardMarkup {
	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –æ–ø—Ü—ñ—è–º–∏
	return &tbot.InlineKeyboardMarkup{
		InlineKeyboard: [][]tbot.InlineKeyboardButton{
			{
				{Text: "–î–æ–¥–∞—Ç–∏ –æ–ø—Ü—ñ—é", CallbackData: "add_option"},
				{Text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–ø—Ü—ñ—ó", CallbackData: "view_options"},
			},
			{
				{Text: "–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", CallbackData: "add_feedback"},
				{Text: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏", CallbackData: "view_feedback"},
			},
		},
	}
}
